name: Pull Request Workflow

on:
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository with full history to get the commits we need
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Get list of changed files as JSON
      - name: Get list of changed files as JSON
        id: get_files
        run: |
          FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          JSON_FILES=$(echo "$FILES" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=files::$JSON_FILES"

      # Step 3: List all changed files
      - name: List all changed files
        run: |
          FILES_JSON='${{ steps.get_files.outputs.files }}'
          echo "Changed files:"
          echo "$FILES_JSON" | jq -r '.[]'

      # Step 4: Check for changes in specific directories and find projects to build
      - name: Check for changes in specific directories and find projects to build
        id: check_projects
        run: |
          FILES_JSON='${{ steps.get_files.outputs.files }}'
          PROJECTS_TO_BUILD=()

          # Check if any files in the specified directories have changed
          for FILE in $(echo "$FILES_JSON" | jq -r '.[]'); do
            if [[ "$FILE" =~ ^(Portal|ResourceProvisioner|ServerlessOperations)/src/([^/]+)/.* ]]; then
              PROJECT_NAME=$(echo "$FILE" | sed -E 's|^(Portal|ResourceProvisioner|ServerlessOperations)/src/([^/]+)/.*|\2|')
              if [[ ! " ${PROJECTS_TO_BUILD[@]} " =~ " ${PROJECT_NAME} " ]]; then
                PROJECTS_TO_BUILD+=("$PROJECT_NAME")
              fi
            fi
          done

          if [ ${#PROJECTS_TO_BUILD[@]} -eq 0 ]; then
            echo "No projects need to be built. Skipping build step."
            exit 0
          else
            echo "Projects to be built: ${PROJECTS_TO_BUILD[@]}"
            echo "::set-output name=projects::$(echo ${PROJECTS_TO_BUILD[@]} | jq -R -s -c 'split(" ")')"
          fi

      # Step 5: Generate appsettings files
      - name: Generate appsettings files
        if: steps.check_projects.outputs.projects != '[]'
        run: |
          cd Portal/src
          files=$(find Datahub.Portal -type f \( -name 'appsettings*json-tmpl' -o -name 'launch*json-tmpl' \) ! -path '*/Debug/*')
          for file in $files; do
            file_rendered=${file%-tmpl}
            echo "Processing file: $file > $file_rendered"
            cp "$file" "$file_rendered"
          done
          cd Datahub.Portal
          mv appsettings.Development.json appsettings.dev.json
          mv appsettings.json-tmpl-spdatahub appsettings.json

      # Step 6: Build changed projects
      - name: Build projects
        if: steps.check_projects.outputs.projects != '[]'
        run: |
          PROJECTS_JSON='${{ steps.check_projects.outputs.projects }}'
          for PROJECT in $(echo "$PROJECTS_JSON" | jq -r '.[]'); do
            PROJECT_PATH="Portal/src/${PROJECT}"
            CSPROJ_PATH=$(find "$PROJECT_PATH" -name "*.csproj" | head -n 1)
            if [ -n "$CSPROJ_PATH" ]; then
              echo "Building project: $CSPROJ_PATH"
              dotnet build "$CSPROJ_PATH"
            else
              echo "No .csproj file found for project: $PROJECT"
            fi
          done