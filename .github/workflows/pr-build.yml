name: Pull Request Workflow

on:
  pull_request:
    branches:
      - '**'

jobs:
  prep:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository with full history to get the commits we need
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Get list of changed files as JSON
      - name: Get list of changed files as JSON
        id: get_files
        run: |
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          JSON_FILES=$(echo "$FILES" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=files::$JSON_FILES"

      # Step 3: List all changed files
      - name: List all changed files
        run: |
          FILES_JSON='${{ steps.get_files.outputs.files }}'
          echo "Changed files:"
          echo "$FILES_JSON" | jq -r '.[]'

  build:
    runs-on: ubuntu-latest
    needs: prep

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 4: Find and build changed projects
      - name: Find and build changed projects
        if: steps.get_files.outputs.files != '[]'
        run: |
          FILES_JSON='${{ needs.prep.outputs.files }}'
          PROJECTS_TO_BUILD=()

          # Check if any files in the specified directories have changed
          for FILE in $(echo "$FILES_JSON" | jq -r '.[]'); do
            if [[ "$FILE" =~ ^(Portal|ResourceProvisioner|ServerlessOperations)/src/([^/]+)/.* ]]; then
              PROJECT_PATH=$(echo "$FILE" | grep -oE '^(Portal|ResourceProvisioner|ServerlessOperations)/src/[^/]+')
              CSPROJ_PATH=$(find "$PROJECT_PATH" -name "*.csproj" | head -n 1)
              if [ -n "$CSPROJ_PATH" ]; then
                PROJECTS_TO_BUILD+=("$CSPROJ_PATH")
              fi
            fi
          done

          if [ ${#PROJECTS_TO_BUILD[@]} -eq 0 ]; then
            echo "No projects need to be built. Skipping build step."
            exit 0
          else
            echo "The following projects will be built:"
            for PROJECT in "${PROJECTS_TO_BUILD[@]}"; do
              echo " - $PROJECT"
            done
            for PROJECT in "${PROJECTS_TO_BUILD[@]}"; do
              echo "Restoring dependencies for project: $PROJECT"
              dotnet restore "$PROJECT"
              echo "Building project: $PROJECT"
              dotnet build "$PROJECT" /warnaserror:none
            done
          fi