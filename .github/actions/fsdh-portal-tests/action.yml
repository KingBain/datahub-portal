# .github/actions/fsdh-portal-tests/action.yml
name: "FSDH Portal Tests"
description: "Run tests and generate code coverage report"

inputs:
  azureSubscription:
    description: 'Azure service connection'
    required: false
  buildConfiguration:
    description: 'Build configuration (Release, Debug, etc.)'
    required: true
  environment:
    description: 'Environment (e.g., dev, prod)'
    required: true

runs:
  using: "composite"
  steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Install .NET SDK 8.0.x
    - name: Setup .NET Core sdk 8.0.x
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        include-prerelease: true

    # Step 3: Datahub Function Unit Tests
    - name: Datahub Function Unit Tests
      run: dotnet test Portal/test/Datahub.Functions.UnitTests/Datahub.Functions.UnitTests.csproj --configuration ${{ inputs.buildConfiguration }} --collect:"XPlat Code Coverage"
      shell: bash
      continue-on-error: true  # Mimics condition: succeededOrFailed()

    # Step 4: Datahub Infrastructure Unit Tests
    - name: Datahub Infrastructure Unit Tests
      run: dotnet test Portal/test/Datahub.Infrastructure.UnitTests/Datahub.Infrastructure.UnitTests.csproj --configuration ${{ inputs.buildConfiguration }} --collect:"XPlat Code Coverage"
      shell: bash
      continue-on-error: true

    # Step 5: Datahub Specflow Tests
    - name: Datahub Specflow Tests
      run: dotnet test Portal/test/Datahub.SpecflowTests/Datahub.SpecflowTests.csproj --configuration ${{ inputs.buildConfiguration }} --collect:"XPlat Code Coverage"
      shell: bash
      continue-on-error: true

    # Step 6: Datahub Specs Tests
    - name: Datahub Specs Tests
      run: dotnet test Portal/test/Datahub.Specs/Datahub.Specs.csproj --configuration ${{ inputs.buildConfiguration }} --collect:"XPlat Code Coverage"
      shell: bash
      continue-on-error: true

    # Step 7: Datahub Unit Tests
    - name: Datahub Unit Tests
      run: dotnet test Portal/test/Datahub.Tests/Datahub.Tests.csproj --configuration ${{ inputs.buildConfiguration }} --collect:"XPlat Code Coverage"
      shell: bash
      continue-on-error: true

    # Step 8: Create code coverage report
    - name: Install Report Generator and Create Code Coverage Report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:${{ github.workspace }}/**/coverage.cobertura.xml -targetdir:${{ github.workspace }}/Portal/test/CodeCoverage -reporttypes:'HtmlInline_AzurePipelines;Cobertura'
      shell: bash

    # Step 9: Upload Code Coverage Report as Artifact
    - name: Upload Code Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: CodeCoverageReport
        path: Portal/test/CodeCoverage
